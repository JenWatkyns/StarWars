{"version":3,"sources":["store/get-films/consts.js","store/get-films/get-films.reducer.js","store/get-character-info/consts.js","store/get-character-info/get-character-info.reducer.js","store/index.js","helpers/api/index.js","api/films/index.js","model/films/index.js","store/get-films/get-films.action.js","images/star-wars.svg","components/banner-header/index.js","api/character/index.js","model/character-info/index.js","store/get-character-info/get-character-info.action.js","components/button/index.js","images/star-wars-spinner.svg","components/loading-spinner/index.js","components/drop-down/index.js","components/drop-down/connected.js","components/initial-screen/index.js","components/initial-screen/connected.js","components/text-crawl/index.js","components/text-crawl/connected.js","components/character-table-row/index.js","components/last-row/index.js","helpers/sort/index.js","helpers/filter/index.js","helpers/sum/index.js","helpers/convert/index.js","components/character-table/index.js","components/character-table/connected.js","components/second-screen/index.js","components/error-banner/index.js","components/error-screen/index.js","components/app/index.js","components/app/connected.js","App.js","reportWebVitals.js","index.js"],"names":["GET_FILMS_START","GET_FILMS_SUCCESS","GET_FILMS_FAILURE","getFilmsReducer","state","action","type","meta","status","model","payload","GET_CHARACTERS_START","GET_CHARACTERS_SUCCESS","GET_CHARACTERS_FAILURE","getCharacterInfoReducer","store","createStore","combineReducers","films","filmInfo","compose","applyMiddleware","thunk","getUrl","url","init","headers","Headers","Accept","method","fetch","then","response","json","urlFetch","filmsModel","data","results","map","film","title","id","episode_id","characters","openingCrawl","opening_crawl","getFilmsAction","dispatch","catch","BannerHeader","className","src","logo","alt","characterInfo","characterUrl","characterInfoModel","character","name","gender","height","Number","getCharacterInfoAction","characterArr","Promise","all","forEach","push","Button","text","onClick","LoadingSpinner","spinner","DropDown","fetchCharacterInfo","setId","React","useState","open","setOpen","filter","setTitle","drop","useRef","clickHandler","e","target","closest","current","useEffect","document","addEventListener","removeEventListener","ref","length","connectedDropDown","connect","InitialScreen","connectedInitialScreen","fetchFilms","TextCrawl","crawl","direction","scrollamount","loop","connectedTextCrawl","CharacterTableRow","LastRow","charCount","feet","inches","sortFunc","charArr","sortBy","order","sort","a","b","filterFunc","char","sumFunc","reduce","accumulator","curr","isNaN","convertFunc","CharacterTable","setCharArr","setHeight","nameOrder","setOrderN","genderOrder","setOrderG","heightOrder","setOrderH","Math","floor","round","connectedCharacterTable","SecondScreen","ErrorBanner","ErrorScreen","App","failure","connectedApp","app","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"iaAAaA,EAAkB,kBAClBC,EAAoB,oBACpBC,EAAoB,oBC0BlBC,EAtBS,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCAC5C,OAAQA,EAAOC,MACX,KAAKN,EACD,OAAO,2BACAI,GADP,IAEIG,KAAK,CAACC,OAAO,gBAErB,KAAKP,EACD,MAAO,CACHQ,MAAOJ,EAAOK,QACdH,KAAK,CAACC,OAAO,YAErB,KAAKN,EACD,OAAO,2BACAE,GADP,IAEIG,KAAK,CAACC,OAAO,aAErB,QACI,OAAOJ,ICxBNO,EAAuB,uBACvBC,EAAyB,yBACzBC,EAAyB,yBCwBvBC,EApBiB,WAAyB,IAAxBV,EAAuB,uDAAf,GAAIC,EAAW,uCACpD,OAAQA,EAAOC,MACX,KAAKK,EACD,MAAO,CACHJ,KAAK,CAACC,OAAO,eAErB,KAAKI,EACD,MAAO,CACHH,MAAOJ,EAAOK,QACdH,KAAK,CAACC,OAAO,YAErB,KAAKK,EACD,MAAO,CACHN,KAAK,CAACC,OAAO,YAErB,QACI,OAAOJ,ICZJW,EALDC,YAAYC,YAAgB,CACtCC,MAAOf,EACPgB,SAAUL,IACVM,YAAQC,YAAgBC,O,OCUtBC,EAAS,SAACC,GACZ,IAAMC,EAAO,CACTC,QAXG,IAAIC,QAJK,CACZC,OAAQ,mBACR,eAAgB,qBAchBC,OAAQ,OAEZ,OAAOC,MAAMN,EAAKC,GACjBM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WCdhBf,EALD,WACV,IAAMgB,ED2BE,gCC3Ba,SACrB,OAAOX,EAAOW,ICGHC,EAVI,SAACC,GAAU,IAAD,EACzB,iBAAOA,EAAKC,eAAZ,aAAO,EAAcC,KAAI,SAACC,GAAD,MAAW,CAChCC,MAAOD,EAAKC,MACZC,GAAIF,EAAKG,WACTC,WAAYJ,EAAKI,WACjBC,aAAcL,EAAKM,mBCqBZC,EAlBQ,kBAAM,SAACC,GAI1B,OAHAA,EAAS,CACLzC,KAAMN,IAEHkB,IACFa,MAAK,SAACC,GACHe,EAAS,CACLzC,KAAML,EACNS,QAASyB,EAAWH,QAG3BgB,OAAM,WACHD,EAAS,CACLzC,KAAMJ,SCrBP,G,MAAA,IAA0B,uC,OCiB1B+C,EARM,WACjB,OACI,qBAAKC,UAAU,WAAf,SACI,qBAAKA,UAAU,OAAOC,IAAKC,EAAMC,IAAI,sBCDlCC,EAJO,SAACC,GACnB,OAAOhC,EAAOgC,ICDHC,EAPY,SAACC,GAAD,MAAgB,CACnCC,KAAMD,EAAUC,KAChBC,OAAQF,EAAUE,OAClBC,OAAQC,OAAOJ,EAAUG,UC0BlBE,EArBgB,SAACnB,GAAD,OAAgB,SAACI,GAC5CA,EAAS,CACLzC,KAAMK,IAGV,IAAMoD,EAAe,GACrBC,QAAQC,IAAItB,EAAWL,KAAI,SAAAmB,GAAS,OAAIH,EAAcG,OACjD1B,MAAK,SAAAC,GAAQ,OAAIA,EACjBkC,SAAQ,SAAAT,GAAS,OAAIM,EAAaI,KAAKX,EAAmBC,UAC1D1B,MAAK,WACFgB,EAAS,CACLzC,KAAMM,EACNF,QAASqD,OAEdf,OAAM,WACLD,EAAS,CACLzC,KAAMO,SCLPuD,G,MARA,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,KAA+C,IAAzCnB,iBAAyC,MAA7B,GAA6B,MAAzBoB,eAAyB,MAAf,aAAe,EAC7D,OACI,wBAAQpB,UAAS,cAASA,GAAaoB,QAASA,EAAhD,SACKD,MCdE,G,YAAA,IAA0B,+CCe1BE,EARS,WACpB,OACI,qBAAKrB,UAAU,cAAf,SACI,qBAAKC,IAAKqB,EAASnB,IAAI,uBC8CpBoB,EA1CG,SAAC,GAA8C,IAAD,EAA3CvD,EAA2C,EAA3CA,MAAOwD,EAAoC,EAApCA,mBAAoBC,EAAgB,EAAhBA,MAAOlC,EAAS,EAATA,GACnD,EAAwBmC,IAAMC,UAAS,GAAvC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BH,IAAMC,SAAWpC,EAAD,UAAuBvB,EAAM8D,QAAO,SAACzC,GAC3E,OAAOA,EAAKE,KAAOA,KACpB,UAFuC,aAAuB,EAE1DD,MAFyC,gBAAhD,mBAAOA,EAAP,KAAcyC,EAAd,KAGMC,EAAON,IAAMO,OAAO,MAC1B,SAASC,EAAaC,GAAI,IAAD,GAChBA,EAAEC,OAAOC,QAAT,qBAAqBL,EAAKM,eAA1B,aAAqB,EAActC,aAAgB4B,GACpDC,GAAQ,GAShB,OANAH,IAAMa,WAAW,WAEb,OADAC,SAASC,iBAAiB,QAASP,GAC5B,WACHM,SAASE,oBAAoB,QAASR,OAI1C,sBAAKlC,UAAU,YAAY2C,IAAKX,EAAhC,UACI,cAAC,EAAD,CAAQb,KAAM7B,EAAOU,UAAU,WAAWoB,QAAS,kBAAMS,GAASD,MACjEA,GACG,qBAAK5B,UAAU,aAAf,SACKhC,EAAM4E,OAAS,EAAK5E,EAAMoB,KAAI,SAACC,GAAD,OAC/B,cAAC,EAAD,CACI8B,KAAM9B,EAAKC,MACXU,UAAU,iBACVoB,QAAS,WACLS,GAASD,GACTG,EAAS1C,EAAKC,OACdkC,EAAmBnC,EAAKI,YACxBgC,EAAMpC,EAAKE,UAIf,cAAC,EAAD,UC7BTsD,EAFWC,aAZF,SAAC,GAAoB,IAAD,IAAjB9E,aAAiB,MAAT,GAAS,EACxC,MAAQ,CACJA,OAAY,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAOT,QAAS,OAIJ,SAACsC,GACxB,MAAO,CACH2B,mBAAoB,SAAC/B,GAAD,OAAgBI,EAASe,EAAuBnB,QAIlDqD,CAA6CvB,GCKxDwB,G,MAXQ,SAAC,GAAe,IAAbtB,EAAY,EAAZA,MACtB,OACI,gCACI,cAAC,EAAD,IACA,qBAAKzB,UAAU,oBAAf,SACI,cAAC,EAAD,CAAUyB,MAAOA,WCGlBuB,EAFgBF,aAZP,WACpB,MAAO,MAGgB,SAACjD,GACxB,MAAO,CACHoD,WAAY,WACRpD,EAASD,SAKUkD,CAA6CC,GCI7DG,G,MAXI,SAAC,GAAiB,IAAD,EAAflF,EAAe,EAAfA,MAAOuB,EAAQ,EAARA,GACjB4D,EAAK,UAAGnF,EAAM8D,QAAO,SAACzC,GACxB,OAAOA,EAAKE,KAAOA,KACpB,UAFQ,aAAG,EAEPG,aACR,OACI,qBAAKM,UAAU,aAAf,SACI,yBAASA,UAAU,QAAQoD,UAAU,KAAKC,aAAc,EAAGC,KAAK,WAAhE,SAA4EH,QCNzEI,EAFYT,aAJH,SAAC,GAAe,IAAb9E,EAAY,EAAZA,MACvB,MAAO,CAAEA,OAAY,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAOT,QAAS,MAGTuF,CAAyBI,G,OCmBrCM,G,YAhBW,SAAC,GAA8B,IAA5BhD,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OACvC,OACI,sBAAKV,UAAU,sBAAf,UACI,qBAAKA,UAAU,aAAf,SACKQ,IAEL,qBAAKR,UAAU,aAAf,SACKS,IAEL,qBAAKT,UAAU,aAAf,SACKU,SCCF+C,EAVC,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,UAAWhD,EAA2B,EAA3BA,OAAQiD,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACxC,OACI,qBAAK5D,UAAU,sBAAf,SACI,sBAAKA,UAAU,wBAAf,8BACoB0D,EADpB,oBACgDhD,EADhD,QAC6DiD,EAD7D,MACsEC,EADtE,YCKKC,EAZA,SAACC,EAASC,EAAQC,GAC/B,OAAOF,EAAQG,MAAK,SAACC,EAAGC,GACpB,OAAID,EAAEH,GAAUI,EAAEJ,GACPC,GAAS,EAAI,EAEpBE,EAAEH,GAAUI,EAAEJ,GACPC,EAAQ,GAAK,EAEjB,MCAEI,EATE,SAACN,EAASrD,GACzB,OAAOqD,EAAQhC,QAAO,SAACuC,GACnB,MAAe,UAAX5D,EACuB,SAAhB4D,EAAK5D,QAAqC,WAAhB4D,EAAK5D,OAEnC4D,EAAK5D,SAAWA,MCCd6D,EAPD,SAACR,GACb,OAAOA,EAAQS,QAAO,SAACC,EAAaC,GAChC,OAAIC,MAAMD,EAAK/D,QAAgB8D,EACxBA,EAAcC,EAAK/D,SAC3B,ICAUiE,EAJG,SAACjE,GACjB,OAAOA,EAAS,OC0ELkE,EA/DS,SAAC,GAA0B,IAAxB3G,EAAuB,EAAvBA,SAAUX,EAAa,EAAbA,OAEjC,EAA8BoE,IAAMC,SAAS1D,GAA7C,mBAAO6F,EAAP,KAAgBe,EAAhB,KACA,EAA4BnD,IAAMC,SAAS2C,EAAQrG,IAAnD,mBAAOyC,EAAP,KAAeoE,EAAf,KACA,EAA+BpD,IAAMC,UAAS,GAA9C,mBAAOoD,EAAP,KAAkBC,EAAlB,KACA,EAAiCtD,IAAMC,UAAS,GAAhD,mBAAOsD,EAAP,KAAoBC,EAApB,KACA,EAAiCxD,IAAMC,UAAS,GAAhD,mBAAOwD,EAAP,KAAoBC,EAApB,KAWA,OATA1D,IAAMa,WAAU,WACZsC,EAAW5G,GACX6G,EAAUR,EAAQrG,MACnB,CAACA,IAEJyD,IAAMa,WAAU,WACZuC,EAAUR,EAAQR,MACnB,CAACA,IAGA,sBAAK9D,UAAU,kBAAf,UACI,sBAAKA,UAAU,kBAAf,UACI,cAAC,EAAD,CAAQmB,KAAK,SAASC,QAAS,WAC3ByD,EAAW,YAAIT,EAAWnG,EAAU,eAExC,cAAC,EAAD,CAAQkD,KAAK,OAAOC,QAAS,WACzByD,EAAW,YAAIT,EAAWnG,EAAU,aAExC,cAAC,EAAD,CAAQkD,KAAK,QAAQC,QAAS,WAC1ByD,EAAW,YAAIT,EAAWnG,EAAU,cAExC,cAAC,EAAD,CAAQkD,KAAK,gBAAgBC,QAAS,WAClCyD,EAAW,YAAI5G,UAGvB,sBAAK+B,UAAU,0BAAf,UACI,cAAC,EAAD,CAAQmB,KAAK,OAAOnB,UAAU,eAAeoB,QAAS,WAClDyD,EAAW,YAAIhB,EAASC,EAAS,OAAQiB,KACzCC,GAAWD,MAEf,cAAC,EAAD,CAAQ5D,KAAK,SAASnB,UAAU,eAAeoB,QAAS,WACpDyD,EAAW,YAAIhB,EAASC,EAAS,SAAUmB,KAC3CC,GAAWD,MAEf,cAAC,EAAD,CAAQ9D,KAAK,SAASnB,UAAU,eAAeoB,QAAS,WACpDyD,EAAW,YAAIhB,EAASC,EAAS,SAAUqB,KAC3CC,GAAWD,SAGnB,sBAAKnF,UAAU,iBAAf,UACY,YAAX1C,EACG,gCACCwG,EAAQ1E,KAAI,SAACmB,GAAD,OACT,cAAC,EAAD,CAAmBC,KAAMD,EAAUC,KAAMC,OAAQF,EAAUE,OAAQC,OAAQH,EAAUG,YAEzF,cAAC,EAAD,CAASgD,UAAWI,EAAQlB,OAAQlC,OAAQA,EAAQiD,KAAM0B,KAAKC,MAAMX,EAAYjE,IAAUkD,OAAQyB,KAAKE,MAAOZ,EAAYjE,GAAQ,EAAG,SAGtI,cAAC,EAAD,IATJ,WCpDG8E,EAFiB1C,aAPR,SAAC,GAAuB,IAAD,MAApB7E,gBAAoB,MAAT,GAAS,EAC3C,MAAO,CACHA,UAAkB,OAARA,QAAQ,IAARA,OAAA,EAAAA,EAAUV,QAAS,GAC7BD,OAAM,UAAEW,EAASZ,YAAX,aAAE,EAAeC,UAICwF,CAAyB8B,GCsB1Ca,G,MAnBO,SAAC,GAAmB,IAAjBhE,EAAgB,EAAhBA,MAAOlC,EAAS,EAATA,GAC5B,OACI,sBAAKS,UAAU,gBAAf,UACI,cAAC,EAAD,IACA,sBAAKA,UAAU,aAAf,UACI,qBAAKA,UAAU,gBAAf,SACI,cAAC,EAAD,CAAUyB,MAAOA,EAAOlC,GAAIA,MAEhC,qBAAKS,UAAU,iBAAf,SACI,cAAC,EAAD,CAAWT,GAAIA,MAEnB,qBAAKS,UAAU,sBAAf,SACI,cAAC,EAAD,cCPL0F,G,MAXM,WACjB,OACI,qBAAK1F,UAAU,YAAf,SACI,sBAAKA,UAAU,YAAf,UACI,mEACA,kECMD2F,EATM,WACjB,OACI,gCACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAa3F,UAAU,eCkBlB4F,EAtBL,SAAC,GAA6B,IAA3B3C,EAA0B,EAA1BA,WAAY4C,EAAc,EAAdA,QACvB,EAAoBnE,IAAMC,WAA1B,mBAAOpC,EAAP,KAAWkC,EAAX,KAQA,OANAC,IAAMa,WAAW,WACRsD,GACD5C,OAKJ,iCACM1D,IAAOsG,GACL,cAAC,EAAD,CAAepE,MAAOA,MAEvBlC,IAAOsG,GACN,cAAC,EAAD,CAAcpE,MAAOA,EAAOlC,GAAIA,IAEnCsG,GAAY,cAAC,EAAD,QCNVC,EAFMhD,aAdG,SAAC,GAAmC,IAAD,QAAhC9E,aAAgC,MAAxB,GAAwB,MAApBC,gBAAoB,MAAT,GAAS,EACvD,MAAO,CACH4H,QAAgC,aAAvB,UAAA7H,EAAMX,YAAN,eAAYC,SAAkD,aAA1B,UAAAW,EAASZ,YAAT,eAAeC,YAIzC,SAACuC,GACxB,MAAO,CACHoD,WAAY,WACRpD,EAASD,SAKAkD,CAA6C8C,GCJnDG,OAVf,WACE,OACE,cAAC,IAAD,CAAUlI,MAAOA,EAAjB,SACE,qBAAKmC,UAAU,MAAf,SACE,cAAC,EAAD,SCGOgG,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrH,MAAK,YAAkD,IAA/CsH,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFlE,SAASmE,eAAe,SAM1BX,O","file":"static/js/main.ea660f22.chunk.js","sourcesContent":["export const GET_FILMS_START = 'GET_FILMS_START';\r\nexport const GET_FILMS_SUCCESS = 'GET_FILMS_SUCCESS';\r\nexport const GET_FILMS_FAILURE = 'GET_FILMS_FAILURE';\r\n","import {\r\n    GET_FILMS_START,\r\n    GET_FILMS_SUCCESS,\r\n    GET_FILMS_FAILURE,\r\n} from './consts';\r\n\r\nconst getFilmsReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case GET_FILMS_START:\r\n            return {\r\n                ...state,\r\n                meta:{status:\"submitting\"}\r\n            }\r\n        case GET_FILMS_SUCCESS:\r\n            return {\r\n                model: action.payload,\r\n                meta:{status:\"success\"}\r\n            }\r\n        case GET_FILMS_FAILURE:\r\n            return {\r\n                ...state,\r\n                meta:{status:\"failure\"}\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default getFilmsReducer;\r\n","export const GET_CHARACTERS_START = 'GET_CHARACTERS_START';\r\nexport const GET_CHARACTERS_SUCCESS = 'GET_CHARACTERS_SUCCESS';\r\nexport const GET_CHARACTERS_FAILURE = 'GET_CHARACTERS_FAILURE';\r\n","import {\r\n    GET_CHARACTERS_START,\r\n    GET_CHARACTERS_SUCCESS,\r\n    GET_CHARACTERS_FAILURE,\r\n} from './consts';\r\n\r\nconst getCharacterInfoReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case GET_CHARACTERS_START:\r\n            return {\r\n                meta:{status:\"submitting\"}\r\n            }\r\n        case GET_CHARACTERS_SUCCESS:\r\n            return {\r\n                model: action.payload,\r\n                meta:{status:\"success\"}\r\n            }\r\n        case GET_CHARACTERS_FAILURE:\r\n            return {\r\n                meta:{status:\"failure\"}\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default getCharacterInfoReducer;\r\n","import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport getFilmsReducer from './get-films/get-films.reducer';\r\nimport getCharacterInfoReducer from './get-character-info/get-character-info.reducer';\r\n\r\nconst store = createStore(combineReducers({\r\n    films: getFilmsReducer,\r\n    filmInfo: getCharacterInfoReducer,\r\n}), compose(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n","/**\r\n * This returns the headers to be used in the API\r\n */\r\n\r\nconst headers = () => {\r\n    const headers = {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n    };\r\n    return new Headers(headers);\r\n};\r\n\r\n/**\r\n * This returns the promise from the fetch request\r\n * \r\n * @param {string} The url to be fetched\r\n */\r\n\r\nconst getUrl = (url) => {\r\n    const init = {\r\n        headers: headers(),\r\n        method: 'GET',\r\n    };\r\n    return fetch(url, init)\r\n    .then(response => response.json());\r\n};\r\n\r\n/**\r\n * This returns the full url fo the fetch request\r\n * \r\n * @param {string} The url \r\n */\r\n\r\nconst url = (url) => `https://swapi.dev/api/${url}`; \r\n\r\nexport {\r\n    getUrl as default, \r\n    headers,\r\n    url,\r\n};\r\n","import getUrl, { url } from '../../helpers/api';\r\n\r\n/**\r\n * This calls the film url\r\n */\r\nconst films = () => {\r\n    const urlFetch = url(\"films\");\r\n    return getUrl(urlFetch)\r\n}\r\n\r\nexport default films;\r\n","const filmsModel = (data) => {\r\n    return data.results?.map((film) => ({\r\n        title: film.title,\r\n        id: film.episode_id,\r\n        characters: film.characters,\r\n        openingCrawl: film.opening_crawl,\r\n    }))\r\n}\r\n\r\n\r\nexport default filmsModel;\r\n","import films from '../../api/films';\r\nimport {\r\n    GET_FILMS_START,\r\n    GET_FILMS_SUCCESS,\r\n    GET_FILMS_FAILURE,\r\n} from './consts';\r\nimport filmsModel from '../../model/films';\r\n\r\nconst getFilmsAction = () => (dispatch) => {\r\n    dispatch({\r\n        type: GET_FILMS_START,\r\n    });\r\n    return films()\r\n        .then((response) => {\r\n            dispatch({\r\n                type: GET_FILMS_SUCCESS,\r\n                payload: filmsModel(response),\r\n            });\r\n        })\r\n        .catch(() => {\r\n            dispatch({\r\n                type: GET_FILMS_FAILURE,\r\n            });\r\n        })\r\n};\r\n\r\nexport default getFilmsAction;\r\n","export default __webpack_public_path__ + \"static/media/star-wars.3bf2a05e.svg\";","import React from 'react';\r\nimport './css/banner-header.css';\r\nimport logo from '../../images/star-wars.svg';\r\n\r\n/**\r\n * This component is a banner that is used as a header displaying the Star Wars logo\r\n * \r\n */\r\n\r\nconst BannerHeader = () => {\r\n    return (\r\n        <div className='logo-box'>\r\n            <img className='logo' src={logo} alt='Star Wars Logo' />\r\n        </div>\r\n    ); \r\n};\r\n\r\nexport default BannerHeader;\r\n","import getUrl from '../../helpers/api';\r\n\r\n/**\r\n * This calls the character url\r\n * \r\n * @param {string} this is the specific character url\r\n */\r\nconst characterInfo = (characterUrl) => {\r\n    return getUrl(characterUrl)\r\n}\r\n\r\nexport default characterInfo;\r\n","const characterInfoModel = (character) => ({\r\n        name: character.name,\r\n        gender: character.gender,\r\n        height: Number(character.height),\r\n    });\r\n\r\n\r\nexport default characterInfoModel;\r\n","import {\r\n    GET_CHARACTERS_START,\r\n    GET_CHARACTERS_SUCCESS,\r\n    GET_CHARACTERS_FAILURE,\r\n} from './consts';\r\nimport characterInfo from '../../api/character';\r\nimport characterInfoModel from '../../model/character-info';\r\n\r\nconst getCharacterInfoAction = (characters) => (dispatch) => {\r\n    dispatch({\r\n        type: GET_CHARACTERS_START,\r\n    });\r\n\r\n    const characterArr = [];\r\n    Promise.all(characters.map(character => characterInfo(character)))\r\n        .then(response => response\r\n        .forEach(character => characterArr.push(characterInfoModel(character))))\r\n        .then(() => {\r\n            dispatch({\r\n                type: GET_CHARACTERS_SUCCESS,\r\n                payload: characterArr,\r\n            });\r\n        }).catch(() => {\r\n            dispatch({\r\n                type: GET_CHARACTERS_FAILURE,\r\n            });\r\n    });\r\n};\r\n\r\nexport default getCharacterInfoAction;\r\n","import React from 'react';\r\nimport './css/button.css';\r\n\r\n/**\r\n * This component is a button\r\n * \r\n * @param {string} passes through the text displayed on the button\r\n * @param {string} passes through a className\r\n * @param {func} passes through an onClick function\r\n */\r\n\r\nconst Button = ({ text, className = '', onClick = () => {} }) => {\r\n    return (\r\n        <button className={`btn ${className}`} onClick={onClick}>\r\n            {text}\r\n        </button>\r\n    ); \r\n};\r\n\r\nexport default Button;\r\n","export default __webpack_public_path__ + \"static/media/star-wars-spinner.6d2c8710.svg\";","import React from 'react';\r\nimport './css/loading-spinner.css';\r\nimport spinner from '../../images/star-wars-spinner.svg';\r\n\r\n/**\r\n * This component is a loading spinner that is visible while files are being loaded.\r\n */\r\n const LoadingSpinner = () => {\r\n    return (\r\n        <div className='spinner-box'>\r\n            <img src={spinner} alt='Loading Spinner' />\r\n        </div>\r\n    ); \r\n};\r\n\r\nexport default LoadingSpinner;\r\n","import React from 'react';\r\nimport Button from '../../components/button';\r\nimport './css/drop-down.css';\r\nimport LoadingSpinner from '../loading-spinner';\r\n\r\n/**\r\n * This component forms the drop down list\r\n * \r\n * @param {array} passes through an array of Star Wars films\r\n * @param {func} a function that obtains character info from film array\r\n * @param {func} a function that passes the id up\r\n * @param {string} the id of the object\r\n */\r\n\r\n const DropDown = ({ films, fetchCharacterInfo, setId, id }) => {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [title, setTitle] = React.useState( !id ? \"Select Movie\" : films.filter((film) => {\r\n        return film.id === id;\r\n    })[0]?.title);\r\n    const drop = React.useRef(null);\r\n    function clickHandler(e) {\r\n        if (!e.target.closest(`.${drop.current?.className}`) && open) {\r\n            setOpen(false);\r\n        }\r\n    }\r\n    React.useEffect (() => {\r\n        document.addEventListener(\"click\", clickHandler);\r\n        return () => {\r\n            document.removeEventListener(\"click\", clickHandler);\r\n        };\r\n    });\r\n    return (\r\n        <div className=\"drop-down\" ref={drop}>\r\n            <Button text={title} className=\"btn-size\" onClick={() => setOpen(!open)} />\r\n            {open && (\r\n                <div className=\"list-items\">\r\n                    {films.length > 0  ? films.map((film) => (\r\n                    <Button\r\n                        text={film.title}\r\n                        className=\"ghost btn-size\"\r\n                        onClick={() => {\r\n                            setOpen(!open);\r\n                            setTitle(film.title);\r\n                            fetchCharacterInfo(film.characters);\r\n                            setId(film.id)\r\n                        }}\r\n                    />\r\n                    )) : (\r\n                        <LoadingSpinner />\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    ); \r\n};\r\n\r\nexport default DropDown;\r\n","import { connect } from 'react-redux';\r\nimport getCharacterInfoAction from '../../store/get-character-info/get-character-info.action';\r\nimport DropDown from '.';\r\n\r\n\r\nconst mapStateToProps = ({ films = {} }) => {\r\n    return ({\r\n        films: films?.model || [],\r\n    });\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return({\r\n        fetchCharacterInfo: (characters) => dispatch(getCharacterInfoAction(characters)),\r\n    });\r\n};\r\n\r\nconst connectedDropDown = connect(mapStateToProps, mapDispatchToProps)(DropDown);\r\n\r\nexport default connectedDropDown;\r\n","import React from 'react';\r\nimport BannerHeader from '../../components/banner-header';\r\nimport DropDown from '../drop-down/connected';\r\nimport './css/initial-screen.css';\r\n\r\n/**\r\n * This component is the initial screen before any movies are selected\r\n * \r\n * @param {func} a function that passes the id up\r\n */\r\n\r\n const InitialScreen = ({ setId }) => {\r\n    return (\r\n        <div>\r\n            <BannerHeader />\r\n            <div className=\"initial-drop-down\">\r\n                <DropDown setId={setId} />\r\n            </div>\r\n        </div>\r\n    ); \r\n};\r\n\r\nexport default InitialScreen;\r\n","import { connect } from 'react-redux';\r\nimport getFilmsAction from '../../store/get-films/get-films.action';\r\nimport InitialScreen from '.';\r\n\r\n\r\nconst mapStateToProps = () => {\r\n    return({});\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return({\r\n        fetchFilms: () => {\r\n            dispatch(getFilmsAction());\r\n        },\r\n    });\r\n};\r\n\r\nconst connectedInitialScreen = connect(mapStateToProps, mapDispatchToProps)(InitialScreen);\r\n\r\nexport default connectedInitialScreen;\r\n","/* eslint-disable jsx-a11y/no-distracting-elements */\r\nimport React from 'react';\r\nimport './css/text-crawl.css';\r\n\r\n/**\r\n * This component is a text crawl used to display information\r\n * \r\n * @param {array} An array of Star Wars films\r\n * @param {id} the id of an object in the array\r\n */\r\n const TextCrawl = ({films, id}) => {\r\n     const crawl = films.filter((film) => {\r\n         return film.id === id;\r\n     })[0]?.openingCrawl;\r\n    return (\r\n        <div className='text-crawl'>\r\n            <marquee className='crawl' direction='up' scrollamount={1} loop='infinite'>{crawl}</marquee>\r\n        </div>\r\n    ); \r\n};\r\n\r\nexport default TextCrawl;","import { connect } from 'react-redux';\r\nimport TextCrawl from '.';\r\n\r\n\r\nconst mapStateToProps = ({ films }) => {\r\n    return({ films: films?.model || [] });\r\n};\r\n\r\nconst connectedTextCrawl = connect(mapStateToProps)(TextCrawl);\r\n\r\nexport default connectedTextCrawl;\r\n","import React from 'react';\r\nimport './css/character-table-row.css';\r\n\r\n/**\r\n * This component is used to display character information within a row\r\n * \r\n * @param {string} passes through a name\r\n * @param {string} passes through the gender\r\n * @param {number} passes through height\r\n */\r\n\r\nconst CharacterTableRow = ({ name, gender, height }) => {\r\n    return (\r\n        <div className='character-table-row'>\r\n            <div className='table-item'>\r\n                {name}\r\n            </div>\r\n            <div className='table-item'>\r\n                {gender}\r\n            </div>\r\n            <div className='table-item'>\r\n                {height}\r\n            </div>                \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CharacterTableRow;\r\n","import React from 'react';\r\nimport '../character-table-row/css/character-table-row.css';\r\n\r\n/**\r\n * This component is used to display character information within a row\r\n * \r\n * @param {number} length of the array\r\n * @param {number} sum of total height\r\n * @param {number} sum of total height in feet\r\n * @param {number} remaining inches of total height sum\r\n */\r\n\r\nconst LastRow = ({ charCount, height, feet, inches }) => {\r\n    return (\r\n        <div className='character-table-row'>\r\n            <div className='table-item height-row'>\r\n              Character Count: {charCount} | Total Height: {height} cm ({feet}ft/{inches}in)\r\n            </div>                \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LastRow;\r\n","/**\r\n * This function sorts the array in ascending and descending order\r\n * \r\n * @param {arr} the array in which the main types to be sorted are found\r\n * @param {string} this string is a key that the array is being sorted by\r\n * @param {bool} this  determines the order of the sorting\r\n */\r\n\r\nconst sortFunc = (charArr, sortBy, order) => {\r\n    return charArr.sort((a, b) => {\r\n        if (a[sortBy] < b[sortBy]){\r\n            return order ? -1 : 1;\r\n        }\r\n        if (a[sortBy] > b[sortBy]){\r\n            return order ? 1 : -1;\r\n        }\r\n        return 0;\r\n    })\r\n  };\r\n  \r\n  export default sortFunc;","/**\r\n * This function filters genders by type\r\n * \r\n * @param {arr} the array in which the gender can be found\r\n * @param {string} this string states the tyoe of gender\r\n */\r\n\r\nconst filterFunc = (charArr, gender) => {\r\n    return charArr.filter((char) => {\r\n        if (gender === \"other\") {\r\n            return char.gender !== \"male\" && char.gender !== \"female\"\r\n        }\r\n        return char.gender === gender;\r\n    })\r\n  };\r\n  \r\n  export default filterFunc;","/**\r\n * This function sums up the heights in the array\r\n * \r\n * @param {array} the array in which the type to be summed up is found\r\n */\r\n\r\nconst sumFunc = (charArr) => {\r\n    return charArr.reduce((accumulator, curr) => {\r\n        if (isNaN(curr.height)) return accumulator;\r\n        return accumulator + curr.height;\r\n    }, 0)\r\n  };\r\n  \r\n  export default sumFunc;\r\n","/**\r\n * This function converts cm in to feet\r\n * \r\n * @param {number} the value in cm to be converted \r\n */\r\n\r\nconst convertFunc = (height) => {\r\n    return height / 30.48;\r\n  };\r\n  \r\n  export default convertFunc;\r\n","import React from 'react';\r\nimport './css/character-table.css';\r\nimport CharacterTableRow from '../../components/character-table-row';\r\nimport LoadingSpinner from '../loading-spinner';\r\nimport Button from '../button';\r\nimport LastRow from '../last-row';\r\nimport sortFunc from '../../helpers/sort';\r\nimport filterFunc from '../../helpers/filter';\r\nimport sumFunc from '../../helpers/sum';\r\nimport convertFunc from '../../helpers/convert';\r\n\r\n/**\r\n * This component is a table used to display character information\r\n * \r\n * @param {array} contains the film's information\r\n * @param {string} status of the API\r\n */\r\n\r\n const CharacterTable = ({ filmInfo, status }) => {\r\n\r\n    const [charArr, setCharArr] = React.useState(filmInfo);\r\n    const [height, setHeight] = React.useState(sumFunc(filmInfo));\r\n    const [nameOrder, setOrderN] = React.useState(true);\r\n    const [genderOrder, setOrderG] = React.useState(true);\r\n    const [heightOrder, setOrderH] = React.useState(true);\r\n\r\n    React.useEffect(() => {\r\n        setCharArr(filmInfo);\r\n        setHeight(sumFunc(filmInfo));\r\n    }, [filmInfo]);\r\n\r\n    React.useEffect(() => {\r\n        setHeight(sumFunc(charArr));\r\n    }, [charArr]);\r\n\r\n    return (\r\n        <div className='character-table'>\r\n            <div className=\"filter-btns-box\">\r\n                <Button text=\"Female\" onClick={() => {\r\n                    setCharArr([...filterFunc(filmInfo, \"female\")]);\r\n                }} />\r\n                <Button text=\"Male\" onClick={() => {\r\n                    setCharArr([...filterFunc(filmInfo, \"male\")]);\r\n                }} />\r\n                <Button text=\"Other\" onClick={() => {\r\n                    setCharArr([...filterFunc(filmInfo, \"other\")]);\r\n                }} />\r\n                <Button text=\"Remove Filter\" onClick={() => {\r\n                    setCharArr([...filmInfo]);\r\n                }} />\r\n            </div>\r\n            <div className='character-table-headers'>\r\n                <Button text=\"Name\" className='table-header' onClick={() => {\r\n                    setCharArr([...sortFunc(charArr, \"name\", nameOrder)]);\r\n                    setOrderN(!nameOrder);\r\n                    }} />\r\n                <Button text=\"Gender\" className='table-header' onClick={() => {\r\n                    setCharArr([...sortFunc(charArr, \"gender\", genderOrder)]);\r\n                    setOrderG(!genderOrder);\r\n                    }} />\r\n                <Button text=\"Height\" className='table-header' onClick={() => {\r\n                    setCharArr([...sortFunc(charArr, \"height\", heightOrder)]);\r\n                    setOrderH(!heightOrder);\r\n                    }} />\r\n            </div>\r\n            <div className=\"character-info\">\r\n            {status === 'success'  ? (\r\n                <div>\r\n                {charArr.map((character) => (\r\n                    <CharacterTableRow name={character.name} gender={character.gender} height={character.height} />\r\n                ))}\r\n                <LastRow charCount={charArr.length} height={height} feet={Math.floor(convertFunc(height))} inches={Math.round((convertFunc(height)%1)*12)} />\r\n                </div>\r\n            ) : (\r\n                <LoadingSpinner />\r\n            )};\r\n            </div>\r\n        </div>\r\n    ); \r\n};\r\n\r\nexport default CharacterTable;\r\n","import { connect } from 'react-redux';\r\nimport CharacterTable from '.';\r\n\r\n\r\nconst mapStateToProps = ({ filmInfo = {} }) => {\r\n    return({\r\n        filmInfo: filmInfo?.model || [],\r\n        status: filmInfo.meta?.status,\r\n    });\r\n};\r\n\r\nconst connectedCharacterTable = connect(mapStateToProps)(CharacterTable);\r\n\r\nexport default connectedCharacterTable;\r\n","import React from 'react';\r\nimport BannerHeader from '../../components/banner-header';\r\nimport DropDown from '../drop-down/connected';\r\nimport TextCrawl from '../../components/text-crawl/connected';\r\nimport CharacterTable from '../character-table/connected';\r\nimport './css/second-screen.css';\r\n\r\n/**\r\n * This component is the initial screen before any movies are selected\r\n * \r\n * @param {func} a function that passes the id up\r\n * @param {string} the id of the array\r\n */\r\n\r\n const SecondScreen = ({ setId, id }) => {\r\n    return (\r\n        <div className=\"component-box\">\r\n            <BannerHeader />\r\n            <div className=\"box-within\">\r\n                <div className=\"drop-down-box\">\r\n                    <DropDown setId={setId} id={id} />\r\n                </div>\r\n                <div className=\"text-crawl-box\">\r\n                    <TextCrawl id={id} />\r\n                </div>\r\n                <div className=\"character-table-box\">\r\n                    <CharacterTable />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    ); \r\n};\r\n\r\nexport default SecondScreen;\r\n","import React from 'react';\r\nimport './css/error-banner.css';\r\n\r\n/**\r\n * This component is a banner that is used to indicate an error\r\n * \r\n * \r\n */\r\n const ErrorBanner = () => {\r\n    return (\r\n        <div className='error-box'>\r\n            <div className='error-msg'>\r\n                <h4>Oh no! Occurred an error, it has.</h4>\r\n                <p>Try again later, you must.</p>\r\n            </div>\r\n        </div>\r\n    ); \r\n};\r\n\r\nexport default ErrorBanner;\r\n","import React from 'react';\r\nimport BannerHeader from '../../components/banner-header';\r\nimport ErrorBanner from '../error-banner';\r\n\r\n/**\r\n * This component shows the error banner, should content not be able to load\r\n * \r\n *\r\n */\r\n\r\n const ErrorScreen = () => {\r\n    return (\r\n        <div>\r\n            <BannerHeader />\r\n            <ErrorBanner className=\"banner\" />\r\n        </div>\r\n    ); \r\n};\r\n\r\nexport default ErrorScreen;","import React from 'react';\r\nimport InitialScreen from '../initial-screen/connected';\r\nimport SecondScreen from '../second-screen';\r\nimport ErrorScreen from '../error-screen';\r\n\r\n\r\n/**\r\n * This component is used to determine which screen is showed and fetch the first api\r\n * \r\n */\r\nconst App = ({ fetchFilms, failure }) => {\r\n    const [id, setId] = React.useState();\r\n\r\n    React.useEffect (() => {\r\n        if (!failure) {\r\n            fetchFilms();\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {!id && !failure && (\r\n                <InitialScreen setId={setId} />\r\n            )}\r\n            {!!id && !failure && (\r\n                <SecondScreen setId={setId} id={id} />\r\n            )}\r\n            {failure && (<ErrorScreen />)}\r\n        </div>\r\n    )\r\n}\r\n   \r\n  export default App;\r\n","import { connect } from 'react-redux';\r\nimport App from '.';\r\nimport getFilmsAction from '../../store/get-films/get-films.action';\r\n\r\n\r\nconst mapStateToProps = ({ films = {}, filmInfo = {} }) => {\r\n    return {\r\n        failure: films.meta?.status === \"failure\" || filmInfo.meta?.status === \"failure\",\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return({\r\n        fetchFilms: () => {\r\n            dispatch(getFilmsAction());\r\n        }\r\n    });\r\n};\r\n\r\nconst connectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\nexport default connectedApp;\r\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './components/app/connected';\n\nfunction app() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <App />\n      </div>\n    </Provider>\n  );\n}\n\nexport default app;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}