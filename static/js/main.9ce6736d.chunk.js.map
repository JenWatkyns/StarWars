{"version":3,"sources":["store/get-films/consts.js","store/get-films/get-films.reducer.js","store/get-character-info/consts.js","store/get-character-info/get-character-info.reducer.js","store/index.js","helpers/api/index.js","api/films/index.js","model/films/index.js","store/get-films/get-films.action.js","images/star-wars.svg","components/banner-header/index.js","api/character/index.js","model/character-info/index.js","store/get-character-info/get-character-info.action.js","components/button/index.js","images/star-wars-spinner.svg","components/loading-spinner/index.js","components/drop-down/index.js","components/drop-down/connected.js","components/initial-screen/index.js","components/initial-screen/connected.js","components/text-crawl/index.js","components/text-crawl/connected.js","components/character-table-row/index.js","components/last-row/index.js","helpers/sort/index.js","helpers/filter/index.js","helpers/sum/index.js","helpers/convert/index.js","components/character-table/index.js","components/character-table/connected.js","components/second-screen/index.js","components/error-banner/index.js","components/error-screen/index.js","components/app/index.js","components/app/connected.js","App.js","reportWebVitals.js","index.js"],"names":["GET_FILMS_START","GET_FILMS_SUCCESS","GET_FILMS_FAILURE","getFilmsReducer","state","action","type","meta","status","model","payload","GET_CHARACTERS_START","GET_CHARACTERS_SUCCESS","GET_CHARACTERS_FAILURE","getCharacterInfoReducer","store","createStore","combineReducers","films","filmInfo","compose","applyMiddleware","thunk","getUrl","url","init","headers","Headers","Accept","method","fetch","then","response","json","urlFetch","filmsModel","data","results","map","film","title","id","episode_id","characters","openingCrawl","opening_crawl","getFilmsAction","dispatch","catch","BannerHeader","className","src","logo","alt","characterInfo","characterUrl","characterInfoModel","character","name","gender","height","Number","getCharacterInfoAction","characterArr","Promise","all","forEach","push","Button","text","onClick","LoadingSpinner","spinner","DropDown","fetchCharacterInfo","setId","React","useState","open","setOpen","filter","setTitle","drop","useRef","clickHandler","e","target","closest","current","useEffect","document","addEventListener","removeEventListener","ref","length","connectedDropDown","connect","InitialScreen","connectedInitialScreen","fetchFilms","TextCrawl","crawl","direction","scrollamount","loop","connectedTextCrawl","CharacterTableRow","LastRow","charCount","feet","inches","sortFunc","charArr","sortBy","order","sort","a","b","filterFunc","char","sumFunc","reduce","accumulator","curr","isNaN","convertFunc","CharacterTable","setCharArr","setHeight","nameOrder","setOrderN","genderOrder","setOrderG","heightOrder","setOrderH","Math","floor","round","connectedCharacterTable","SecondScreen","ErrorBanner","ErrorScreen","App","failure","connectedApp","app","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9ce6736d.chunk.js","sourcesContent":["export const GET_FILMS_START = 'GET_FILMS_START';\nexport const GET_FILMS_SUCCESS = 'GET_FILMS_SUCCESS';\nexport const GET_FILMS_FAILURE = 'GET_FILMS_FAILURE';\n","import {\n  GET_FILMS_START,\n  GET_FILMS_SUCCESS,\n  GET_FILMS_FAILURE,\n} from './consts';\n\nconst getFilmsReducer = (state = {}, action) => {\n  switch (action.type) {\n    case GET_FILMS_START:\n      return {\n        ...state,\n        meta: { status: 'submitting' },\n      };\n    case GET_FILMS_SUCCESS:\n      return {\n        model: action.payload,\n        meta: { status: 'success' },\n      };\n    case GET_FILMS_FAILURE:\n      return {\n        ...state,\n        meta: { status: 'failure' },\n      };\n    default:\n      return state;\n  }\n};\n\nexport default getFilmsReducer;\n","export const GET_CHARACTERS_START = 'GET_CHARACTERS_START';\nexport const GET_CHARACTERS_SUCCESS = 'GET_CHARACTERS_SUCCESS';\nexport const GET_CHARACTERS_FAILURE = 'GET_CHARACTERS_FAILURE';\n","import {\n  GET_CHARACTERS_START,\n  GET_CHARACTERS_SUCCESS,\n  GET_CHARACTERS_FAILURE,\n} from './consts';\n\nconst getCharacterInfoReducer = (state = {}, action) => {\n  switch (action.type) {\n    case GET_CHARACTERS_START:\n      return {\n        meta: { status: 'submitting' },\n      };\n    case GET_CHARACTERS_SUCCESS:\n      return {\n        model: action.payload,\n        meta: { status: 'success' },\n      };\n    case GET_CHARACTERS_FAILURE:\n      return {\n        meta: { status: 'failure' },\n      };\n    default:\n      return state;\n  }\n};\n\nexport default getCharacterInfoReducer;\n","import {\n  createStore, applyMiddleware, compose, combineReducers,\n} from 'redux';\nimport thunk from 'redux-thunk';\nimport getFilmsReducer from './get-films/get-films.reducer';\nimport getCharacterInfoReducer from './get-character-info/get-character-info.reducer';\n\nconst store = createStore(combineReducers({\n  films: getFilmsReducer,\n  filmInfo: getCharacterInfoReducer,\n}), compose(applyMiddleware(thunk)));\n\nexport default store;\n","/**\n * This returns the headers to be used in the API\n */\n\nconst createHeaders = () => {\n  const headers = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  };\n  return new Headers(headers);\n};\n\n/**\n * This returns the promise from the fetch request\n *\n * @param {string} The url to be fetched\n */\n\nconst getUrl = (url) => {\n  const init = {\n    headers: createHeaders(),\n    method: 'GET',\n  };\n  return fetch(url, init)\n    .then((response) => response.json());\n};\n\n/**\n * This returns the full url fo the fetch request\n *\n * @param {string} The url\n */\n\nconst url = (urlParam) => `https://swapi.dev/api/${urlParam}`;\n\nexport {\n  getUrl as default,\n  createHeaders,\n  url,\n};\n","import getUrl, { url } from '../../helpers/api';\n\n/**\n * This calls the film url\n */\nconst films = () => {\n  const urlFetch = url('films');\n  return getUrl(urlFetch);\n};\n\nexport default films;\n","const filmsModel = (data) => data.results?.map((film) => ({\n  title: film.title,\n  id: film.episode_id,\n  characters: film.characters,\n  openingCrawl: film.opening_crawl,\n}));\n\nexport default filmsModel;\n","import films from '../../api/films';\nimport {\n  GET_FILMS_START,\n  GET_FILMS_SUCCESS,\n  GET_FILMS_FAILURE,\n} from './consts';\nimport filmsModel from '../../model/films';\n\nconst getFilmsAction = () => (dispatch) => {\n  dispatch({\n    type: GET_FILMS_START,\n  });\n  return films()\n    .then((response) => {\n      dispatch({\n        type: GET_FILMS_SUCCESS,\n        payload: filmsModel(response),\n      });\n    })\n    .catch(() => {\n      dispatch({\n        type: GET_FILMS_FAILURE,\n      });\n    });\n};\n\nexport default getFilmsAction;\n","export default __webpack_public_path__ + \"static/media/star-wars.3bf2a05e.svg\";","import React from 'react';\nimport './css/banner-header.css';\nimport logo from '../../images/star-wars.svg';\n\n/**\n * This component is a banner that is used as a header displaying the Star Wars logo\n *\n */\n\nconst BannerHeader = () => (\n  <div className=\"logo-box\">\n    <img className=\"logo\" src={logo} alt=\"Star Wars Logo\" />\n  </div>\n);\n\nexport default BannerHeader;\n","import getUrl from '../../helpers/api';\n\n/**\n * This calls the character url\n *\n * @param {string} this is the specific character url\n */\nconst characterInfo = (characterUrl) => getUrl(characterUrl);\n\nexport default characterInfo;\n","const characterInfoModel = (character) => ({\n  name: character.name,\n  gender: character.gender,\n  height: Number(character.height),\n});\n\nexport default characterInfoModel;\n","import {\n  GET_CHARACTERS_START,\n  GET_CHARACTERS_SUCCESS,\n  GET_CHARACTERS_FAILURE,\n} from './consts';\nimport characterInfo from '../../api/character';\nimport characterInfoModel from '../../model/character-info';\n\nconst getCharacterInfoAction = (characters) => (dispatch) => {\n  dispatch({\n    type: GET_CHARACTERS_START,\n  });\n\n  const characterArr = [];\n  Promise.all(characters.map((character) => characterInfo(character)))\n    .then((response) => response\n      .forEach((character) => characterArr.push(characterInfoModel(character))))\n    .then(() => {\n      dispatch({\n        type: GET_CHARACTERS_SUCCESS,\n        payload: characterArr,\n      });\n    }).catch(() => {\n      dispatch({\n        type: GET_CHARACTERS_FAILURE,\n      });\n    });\n};\n\nexport default getCharacterInfoAction;\n","import React from 'react';\nimport './css/button.css';\n\n/**\n * This component is a button\n *\n * @param {string} passes through the text displayed on the button\n * @param {string} passes through a className\n * @param {func} passes through an onClick function\n */\n\nconst Button = ({ text, className = '', onClick = () => {} }) => (\n  <button className={`btn ${className}`} onClick={onClick} type=\"button\">\n    {text}\n  </button>\n);\n\nexport default Button;\n","export default __webpack_public_path__ + \"static/media/star-wars-spinner.6d2c8710.svg\";","import React from 'react';\nimport './css/loading-spinner.css';\nimport spinner from '../../images/star-wars-spinner.svg';\n\n/**\n * This component is a loading spinner that is visible while files are being loaded.\n */\nconst LoadingSpinner = () => (\n  <div className=\"spinner-box\">\n    <img src={spinner} alt=\"Loading Spinner\" />\n  </div>\n);\n\nexport default LoadingSpinner;\n","import React from 'react';\nimport Button from '../button';\nimport './css/drop-down.css';\nimport LoadingSpinner from '../loading-spinner';\n\n/**\n * This component forms the drop down list\n *\n * @param {array} passes through an array of Star Wars films\n * @param {func} a function that obtains character info from film array\n * @param {func} a function that passes the id up\n * @param {string} the id of the object\n */\n\nconst DropDown = ({\n  films, fetchCharacterInfo, setId, id,\n}) => {\n  const [open, setOpen] = React.useState(false);\n  const [title, setTitle] = React.useState(!id ? 'Select Movie' : films.filter((film) => film.id === id)[0]?.title);\n  const drop = React.useRef(null);\n  function clickHandler(e) {\n    if (!e.target.closest(`.${drop.current?.className}`) && open) {\n      setOpen(false);\n    }\n  }\n  React.useEffect(() => {\n    document.addEventListener('click', clickHandler);\n    return () => {\n      document.removeEventListener('click', clickHandler);\n    };\n  });\n  return (\n    <div className=\"drop-down\" ref={drop}>\n      <Button text={title} className=\"btn-size\" onClick={() => setOpen(!open)} />\n      {open && (\n        <div className=\"list-items\">\n          {films.length > 0 ? films.map((film) => (\n            <Button\n              text={film.title}\n              className=\"ghost btn-size\"\n              onClick={() => {\n                setOpen(!open);\n                setTitle(film.title);\n                fetchCharacterInfo(film.characters);\n                setId(film.id);\n              }}\n              key={film.id}\n            />\n          )) : (\n            <LoadingSpinner />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DropDown;\n","import { connect } from 'react-redux';\nimport getCharacterInfoAction from '../../store/get-character-info/get-character-info.action';\nimport DropDown from '.';\n\nconst mapStateToProps = ({ films = {} }) => ({\n  films: films?.model || [],\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCharacterInfo: (characters) => dispatch(getCharacterInfoAction(characters)),\n});\n\nconst connectedDropDown = connect(mapStateToProps, mapDispatchToProps)(DropDown);\n\nexport default connectedDropDown;\n","import React from 'react';\nimport BannerHeader from '../banner-header';\nimport DropDown from '../drop-down/connected';\nimport './css/initial-screen.css';\n\n/**\n * This component is the initial screen before any movies are selected\n *\n * @param {func} a function that passes the id up\n */\n\nconst InitialScreen = ({ setId }) => (\n  <div>\n    <BannerHeader />\n    <div className=\"initial-drop-down\">\n      <DropDown setId={setId} />\n    </div>\n  </div>\n);\n\nexport default InitialScreen;\n","import { connect } from 'react-redux';\nimport getFilmsAction from '../../store/get-films/get-films.action';\nimport InitialScreen from '.';\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchFilms: () => {\n    dispatch(getFilmsAction());\n  },\n});\n\nconst connectedInitialScreen = connect(mapStateToProps, mapDispatchToProps)(InitialScreen);\n\nexport default connectedInitialScreen;\n","/* eslint-disable jsx-a11y/no-distracting-elements */\nimport React from 'react';\nimport './css/text-crawl.css';\n\n/**\n * This component is a text crawl used to display information\n *\n * @param {array} An array of Star Wars films\n * @param {id} the id of an object in the array\n */\nconst TextCrawl = ({ films, id }) => {\n  const crawl = films.filter((film) => film.id === id)[0]?.openingCrawl;\n  return (\n    <div className=\"text-crawl\">\n      <marquee className=\"crawl\" direction=\"up\" scrollamount={1} loop=\"infinite\">{crawl}</marquee>\n    </div>\n  );\n};\n\nexport default TextCrawl;\n","import { connect } from 'react-redux';\nimport TextCrawl from '.';\n\nconst mapStateToProps = ({ films }) => ({ films: films?.model || [] });\n\nconst connectedTextCrawl = connect(mapStateToProps)(TextCrawl);\n\nexport default connectedTextCrawl;\n","import React from 'react';\nimport './css/character-table-row.css';\n\n/**\n * This component is used to display character information within a row\n *\n * @param {string} passes through a name\n * @param {string} passes through the gender\n * @param {number} passes through height\n */\n\nconst CharacterTableRow = ({ name, gender, height }) => (\n  <div className=\"character-table-row\">\n    <div className=\"table-item\">\n      {name}\n    </div>\n    <div className=\"table-item\">\n      {gender}\n    </div>\n    <div className=\"table-item\">\n      {height}\n    </div>\n  </div>\n);\n\nexport default CharacterTableRow;\n","import React from 'react';\nimport '../character-table-row/css/character-table-row.css';\n\n/**\n * This component is used to display character information within a row\n *\n * @param {number} length of the array\n * @param {number} sum of total height\n * @param {number} sum of total height in feet\n * @param {number} remaining inches of total height sum\n */\n\nconst LastRow = ({\n  charCount, height, feet, inches,\n}) => (\n  <div className=\"character-table-row\">\n    <div className=\"table-item height-row\">\n      Character Count:\n      {' '}\n      {charCount}\n      {' '}\n      | Total Height:\n      {' '}\n      {height}\n      {' '}\n      cm (\n      {feet}\n      ft/\n      {inches}\n      in)\n    </div>\n  </div>\n);\n\nexport default LastRow;\n","/**\n * This function sorts the array in ascending and descending order\n *\n * @param {arr} the array in which the main types to be sorted are found\n * @param {string} this string is a key that the array is being sorted by\n * @param {bool} this  determines the order of the sorting\n */\n\nconst sortFunc = (charArr, sortBy, order) => charArr.sort((a, b) => {\n  if (a[sortBy] < b[sortBy]) {\n    return order ? -1 : 1;\n  }\n  if (a[sortBy] > b[sortBy]) {\n    return order ? 1 : -1;\n  }\n  return 0;\n});\n\nexport default sortFunc;\n","/**\n * This function filters genders by type\n *\n * @param {arr} the array in which the gender can be found\n * @param {string} this string states the tyoe of gender\n */\n\nconst filterFunc = (charArr, gender) => charArr.filter((char) => {\n  if (gender === 'other') {\n    return char.gender !== 'male' && char.gender !== 'female';\n  }\n  return char.gender === gender;\n});\n\nexport default filterFunc;\n","/**\n * This function sums up the heights in the array\n *\n * @param {array} the array in which the type to be summed up is found\n */\n\nconst sumFunc = (charArr) => charArr.reduce((accumulator, curr) => {\n  if (Number.isNaN(curr.height)) return accumulator;\n  return accumulator + curr.height;\n}, 0);\n\nexport default sumFunc;\n","/**\n * This function converts cm in to feet\n *\n * @param {number} the value in cm to be converted\n */\n\nconst convertFunc = (height) => height / 30.48;\n\nexport default convertFunc;\n","import React from 'react';\nimport './css/character-table.css';\nimport CharacterTableRow from '../character-table-row';\nimport LoadingSpinner from '../loading-spinner';\nimport Button from '../button';\nimport LastRow from '../last-row';\nimport sortFunc from '../../helpers/sort';\nimport filterFunc from '../../helpers/filter';\nimport sumFunc from '../../helpers/sum';\nimport convertFunc from '../../helpers/convert';\n\n/**\n * This component is a table used to display character information\n *\n * @param {array} contains the film's information\n * @param {string} status of the API\n */\n\nconst CharacterTable = ({ filmInfo, status }) => {\n  const [charArr, setCharArr] = React.useState(filmInfo);\n  const [height, setHeight] = React.useState(sumFunc(filmInfo));\n  const [nameOrder, setOrderN] = React.useState(true);\n  const [genderOrder, setOrderG] = React.useState(true);\n  const [heightOrder, setOrderH] = React.useState(true);\n\n  React.useEffect(() => {\n    setCharArr(filmInfo);\n    setHeight(sumFunc(filmInfo));\n  }, [filmInfo]);\n\n  React.useEffect(() => {\n    setHeight(sumFunc(charArr));\n  }, [charArr]);\n\n  return (\n    <div className=\"character-table\">\n      <div className=\"filter-btns-box\">\n        <div className=\"text\">\n          <p>Filter By:</p>\n        </div>\n        <Button\n          text=\"Female\"\n          onClick={() => {\n            setCharArr([...filterFunc(filmInfo, 'female')]);\n          }}\n        />\n        <Button\n          text=\"Male\"\n          onClick={() => {\n            setCharArr([...filterFunc(filmInfo, 'male')]);\n          }}\n        />\n        <Button\n          text=\"Other\"\n          onClick={() => {\n            setCharArr([...filterFunc(filmInfo, 'other')]);\n          }}\n        />\n        <Button\n          text=\"Remove Filter\"\n          onClick={() => {\n            setCharArr([...filmInfo]);\n          }}\n        />\n      </div>\n      <div className=\"character-table-headers\">\n        <Button\n          text=\"Name\"\n          className=\"table-header\"\n          onClick={() => {\n            setCharArr([...sortFunc(charArr, 'name', nameOrder)]);\n            setOrderN(!nameOrder);\n          }}\n        />\n        <Button\n          text=\"Gender\"\n          className=\"table-header\"\n          onClick={() => {\n            setCharArr([...sortFunc(charArr, 'gender', genderOrder)]);\n            setOrderG(!genderOrder);\n          }}\n        />\n        <Button\n          text=\"Height\"\n          className=\"table-header\"\n          onClick={() => {\n            setCharArr([...sortFunc(charArr, 'height', heightOrder)]);\n            setOrderH(!heightOrder);\n          }}\n        />\n      </div>\n      <div className=\"character-info\">\n        {status === 'success' ? (\n          <div>\n            {charArr.map((character) => (\n              <CharacterTableRow name={character.name} gender={character.gender} height={character.height} key={character.name} />\n            ))}\n            <LastRow charCount={charArr.length} height={height} feet={Math.floor(convertFunc(height))} inches={Math.round((convertFunc(height) % 1) * 12)} />\n          </div>\n        ) : (\n          <LoadingSpinner />\n        )}\n        ;\n      </div>\n    </div>\n  );\n};\n\nexport default CharacterTable;\n","import { connect } from 'react-redux';\nimport CharacterTable from '.';\n\nconst mapStateToProps = ({ filmInfo = {} }) => ({\n  filmInfo: filmInfo?.model || [],\n  status: filmInfo.meta?.status,\n});\n\nconst connectedCharacterTable = connect(mapStateToProps)(CharacterTable);\n\nexport default connectedCharacterTable;\n","import React from 'react';\nimport BannerHeader from '../banner-header';\nimport DropDown from '../drop-down/connected';\nimport TextCrawl from '../text-crawl/connected';\nimport CharacterTable from '../character-table/connected';\nimport './css/second-screen.css';\n\n/**\n * This component is the initial screen before any movies are selected\n *\n * @param {func} a function that passes the id up\n * @param {string} the id of the array\n */\n\nconst SecondScreen = ({ setId, id }) => (\n  <div className=\"component-box\">\n    <BannerHeader />\n    <div className=\"box-within\">\n      <div className=\"drop-down-box\">\n        <DropDown setId={setId} id={id} />\n      </div>\n      <div className=\"text-crawl-box\">\n        <TextCrawl id={id} />\n      </div>\n      <div className=\"character-table-box\">\n        <CharacterTable />\n      </div>\n    </div>\n  </div>\n);\n\nexport default SecondScreen;\n","import React from 'react';\nimport './css/error-banner.css';\n\n/**\n * This component is a banner that is used to indicate an error\n *\n *\n */\nconst ErrorBanner = () => (\n  <div className=\"error-box\">\n    <div className=\"error-msg\">\n      <h4>Oh no! Occurred an error, it has.</h4>\n      <p>Try again later, you must.</p>\n    </div>\n  </div>\n);\n\nexport default ErrorBanner;\n","import React from 'react';\nimport BannerHeader from '../banner-header';\nimport ErrorBanner from '../error-banner';\n\n/**\n * This component shows the error banner, should content not be able to load\n *\n *\n */\n\nconst ErrorScreen = () => (\n  <div>\n    <BannerHeader />\n    <ErrorBanner className=\"banner\" />\n  </div>\n);\n\nexport default ErrorScreen;\n","import React from 'react';\nimport InitialScreen from '../initial-screen/connected';\nimport SecondScreen from '../second-screen';\nimport ErrorScreen from '../error-screen';\n\n/**\n * This component is used to determine which screen is showed and fetch the first api\n *\n */\nconst App = ({ fetchFilms, failure }) => {\n  const [id, setId] = React.useState();\n\n  React.useEffect(() => {\n    if (!failure) {\n      fetchFilms();\n    }\n  });\n\n  return (\n    <div>\n      {!id && !failure && (\n      <InitialScreen setId={setId} />\n      )}\n      {!!id && !failure && (\n      <SecondScreen setId={setId} id={id} />\n      )}\n      {failure && (<ErrorScreen />)}\n    </div>\n  );\n};\n\nexport default App;\n","import { connect } from 'react-redux';\nimport App from '.';\nimport getFilmsAction from '../../store/get-films/get-films.action';\n\nconst mapStateToProps = ({ films = {}, filmInfo = {} }) => ({\n  failure: films.meta?.status === 'failure' || filmInfo.meta?.status === 'failure',\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchFilms: () => {\n    dispatch(getFilmsAction());\n  },\n});\n\nconst connectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\n\nexport default connectedApp;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './components/app/connected';\n\nfunction app() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <App />\n      </div>\n    </Provider>\n  );\n}\n\nexport default app;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}